// Package roamv0 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package roamv0

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AddressBotType.
const (
	Bot AddressBotType = "bot"
)

// Defines values for AddressUserType.
const (
	Email AddressUserType = "email"
)

// Defines values for ChatMessageType.
const (
	Message ChatMessageType = "message"
)

// AddressBot defines model for AddressBot.
type AddressBot struct {
	// DisplayDetail A description of the app
	DisplayDetail *string `json:"displayDetail,omitempty"`

	// DisplayImageUrl The user's display image URL
	DisplayImageUrl *string `json:"displayImageUrl,omitempty"`

	// DisplayName The user's display name
	DisplayName string `json:"displayName"`

	// Id The tagged address ID
	Id string `json:"id"`

	// IntegrationId The app's client ID
	IntegrationId string `json:"integrationId"`

	// Type Type of address
	Type AddressBotType `json:"type"`
}

// AddressBotType Type of address
type AddressBotType string

// AddressUser defines model for AddressUser.
type AddressUser struct {
	// DisplayImageUrl The user's display image URL
	DisplayImageUrl *string `json:"displayImageUrl,omitempty"`

	// DisplayName The user's display name
	DisplayName string `json:"displayName"`

	// Email The user's email address
	Email openapi_types.Email `json:"email"`

	// Id The tagged address ID
	Id string `json:"id"`

	// Type Type of address
	Type AddressUserType `json:"type"`
}

// AddressUserType Type of address
type AddressUserType string

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	// Chat A UUID prefixed by a tag identifying the specific type of object
	Chat TaggedUUID `json:"chat"`

	// Sender A UUID prefixed by a tag identifying the specific type of object
	Sender TaggedUUID `json:"sender"`

	// Text Text of the message, formatted as github-flavored markdown
	Text string `json:"text"`

	// ThreadTimestamp Key of the message that this is a reply to. Omitted if this is not a reply.
	ThreadTimestamp *int `json:"threadTimestamp,omitempty"`

	// Timestamp Key of the message within a chat, as Unix microseconds
	Timestamp int             `json:"timestamp"`
	Type      ChatMessageType `json:"type"`
}

// ChatMessageType defines model for ChatMessage.Type.
type ChatMessageType string

// ConversationParticipant defines model for ConversationParticipant.
type ConversationParticipant struct {
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name,omitempty"`

	// User A UUID prefixed by a tag identifying the specific type of object
	User *TaggedUUID `json:"user,omitempty"`
}

// TaggedUUID A UUID prefixed by a tag identifying the specific type of object
type TaggedUUID = string

// Transcript defines model for Transcript.
type Transcript struct {
	Cues *[]TranscriptCue `json:"cues,omitempty"`

	// End Exact time when the transcript stopped
	End *time.Time `json:"end,omitempty"`

	// Id A unique identifier for the transcript
	Id           *openapi_types.UUID        `json:"id,omitempty"`
	Participants *[]ConversationParticipant `json:"participants,omitempty"`
	Room         *string                    `json:"room,omitempty"`
	RoomType     *string                    `json:"roomType,omitempty"`

	// Start Exact time when the transcript began
	Start *time.Time `json:"start,omitempty"`
}

// TranscriptCue defines model for TranscriptCue.
type TranscriptCue struct {
	// End Time that the utterance ended.
	End *time.Time `json:"end,omitempty"`

	// Speaker Name of the person speaking
	Speaker *string `json:"speaker,omitempty"`

	// Start Time that the utterance began.
	Start *time.Time `json:"start,omitempty"`

	// Text The transcribed text of what was said.
	Text *string `json:"text,omitempty"`
}

// User defines model for User.
type User struct {
	Email *openapi_types.Email `json:"email,omitempty"`

	// Id A UUID prefixed by a tag identifying the specific type of object
	Id       TaggedUUID `json:"id"`
	ImageUrl *string    `json:"imageUrl,omitempty"`
	IsAdmin  *bool      `json:"isAdmin,omitempty"`
	Name     string     `json:"name"`
}

// Error defines model for Error.
type Error struct {
	// Error A description of the error.
	Error *string `json:"error,omitempty"`
}

// AddrInfoParams defines parameters for AddrInfo.
type AddrInfoParams struct {
	// Addr The chat address to fetch information for.
	Addr *TaggedUUID `form:"addr,omitempty" json:"addr,omitempty"`
}

// ChatHistoryParams defines parameters for ChatHistory.
type ChatHistoryParams struct {
	// Chat The chat address to fetch information for.
	Chat string `form:"chat" json:"chat"`
}

// ChatListParams defines parameters for ChatList.
type ChatListParams struct {
	// Limit The number of chats to return per response.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor Pagination cursor, a `nextCursor` from an earlier response.
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// ChatPostJSONBody defines parameters for ChatPost.
type ChatPostJSONBody struct {
	// Chat A UUID prefixed by a tag identifying the specific type of object
	Chat            TaggedUUID `json:"chat"`
	Text            string     `json:"text"`
	ThreadTimestamp *int       `json:"threadTimestamp,omitempty"`
}

// ChatTypingParams defines parameters for ChatTyping.
type ChatTypingParams struct {
	// Chat The chat address to fetch information for.
	Chat TaggedUUID `form:"chat" json:"chat"`

	// ThreadTimestamp Timestamp of the message being replied to.
	ThreadTimestamp *int `form:"threadTimestamp,omitempty" json:"threadTimestamp,omitempty"`
}

// GetTranscriptParams defines parameters for GetTranscript.
type GetTranscriptParams struct {
	// Id The transcript id.
	Id *openapi_types.UUID `form:"id,omitempty" json:"id,omitempty"`
}

// ListTranscriptsParams defines parameters for ListTranscripts.
type ListTranscriptsParams struct {
	// From The date to begin listing transcripts (YYYY-MM-DD). Defaults to today.
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`

	// To The date until which to list transcripts (YYYY-MM-DD). Defaults to 1 day after to.
	To *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`

	// Limit The number of transcripts to return per response.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor Pagination cursor, a `nextCursor` from an earlier response.
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// UserListParams defines parameters for UserList.
type UserListParams struct {
	// Limit The number of users to return per response.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor Pagination cursor, a `nextCursor` from an earlier response.
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// ChatPostJSONRequestBody defines body for ChatPost for application/json ContentType.
type ChatPostJSONRequestBody ChatPostJSONBody
